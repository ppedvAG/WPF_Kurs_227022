<!--vgl. CodeBehind-->
<Window x:Class="Templates.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Templates"
        mc:Ignorable="d"
        Title="MainWindow" Height="366" Width="252" Topmost="True">

    <Window.Resources>
        <Style TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <!--ControlTemplates definieren ein vollständig neues Layout für bestehende Elemente.
                        Hierbei können alle Controls und Container verwendet werden. Die Zuweisung zu den Elementen
                        erfolgt über deren Template-Property und den Key des Templates. Die Bindung von Propeties an
                        Properties des Elements erfolgt über ein TemplateBinding-->
                    <ControlTemplate TargetType="Button">
                        <Border BorderBrush="DeepSkyBlue" 
                                BorderThickness="2"
                                CornerRadius="50"
                                Background="{TemplateBinding Background}"
                                x:Name="Bdr_Btn">
                            <StackPanel HorizontalAlignment="Center"
                                              VerticalAlignment="Center">
                                <!--Statt dem ContentPresenter kann z.B. ein TextBlock verwendet werden, wenn auf spezielle Eigenschaften,
                                    wie z.B. die FontSize eingegangen werden soll-->
                                <ContentPresenter/>
                                <TextBlock Text="{TemplateBinding Tag}"/>
                            </StackPanel>
                        </Border>

                        <ControlTemplate.Triggers>
                            <!--Trigger definieren veränderte Properties, wenn bestimmte Zustände eintreten-->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bdr_Btn" Property="Background" Value="Blue"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Bdr_Btn" Property="Background" Value="DarkBlue"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <!--Standart-Background (falls im Button selbst kein Background angegegeben ist)-->
            <Setter Property="Background" Value="Aqua"/>
        </Style>

        <DataTemplate DataType="{x:Type local:Chef}">
                <StackPanel Orientation="Horizontal">
                    <TextBox Text="{Binding Vorname}" Margin="2"/>
                    <TextBlock Text="{Binding Nachname}" Margin="2"/>
                    <TextBlock Text="{Binding Gehalt}" Margin="2"/>
                    <Button Content="Löschen" x:Name="Btn_Delete" Click="Btn_Delete_Click" Tag="{Binding}"/>
                </StackPanel>
                
        </DataTemplate>

        <!--Globales DataTemplate für Personen-Objekte-->
        <DataTemplate DataType="{x:Type local:Person}">
            <!--DataTemplates sind Vorlagen für das Layout von Items in ItemControls (z.B. ListView). Die Bindungen erfolgt an die
                    ItemSource des Zielelements per Kurzbindungen.
                    Explizit definierte DataTemplates haben Vorrang für dem globalen DataTemplate-->
            <StackPanel Orientation="Vertical">
                <StackPanel Orientation="Horizontal">
                    <TextBox Text="{Binding Vorname}" Margin="2"/>
                    <TextBlock Text="{Binding Nachname}" Margin="2"/>
                    <TextBlock Text="{Binding Alter, StringFormat='({0})'}" Margin="2"/>
                    <!--Property 'Tag' kann für jedes beliebige Objekt benutzt werden, z.B. für Zusatzinformation, Metadaten, Referenzen -->
                    <!--Kurzbindung 'Binding' ohne Propertyangabe bindet immer an das ganze Objekt (hier: die ganze Person)-->
                    <Button Content="Löschen" x:Name="Btn_Delete" Click="Btn_Delete_Click" Tag="{Binding}"/>
                </StackPanel>
                <TextBlock Text="{Binding Geburtsdatum, StringFormat='dd.MM.yyyy'}"/>
            </StackPanel>
        </DataTemplate>
    </Window.Resources>


    <StackPanel Margin="10">

        <!--Control-Template-Bsp-Button-->
        <Button Content="Klick Mich"
                Width="100"
                Height="100"
                Click="Button_Click"
                Background="LightBlue"
                Tag="Moin Moin"/>

        <!--DataTemplate-Bsp-->
        <ListBox x:Name="Lsb_Person" Height="100" ItemsSource="{Binding Personenliste}"
                 SelectedValuePath="Vorname">
            <!--<ListBox.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Vertical">
                        <StackPanel Orientation="Horizontal">
                            <TextBox Text="{Binding Vorname}" Margin="2"/>
                            <TextBlock Text="{Binding Nachname}" Margin="2"/>
                            <TextBlock Text="{Binding Alter, StringFormat='({0})'}" Margin="2"/>
                            <Button Content="Löschen" x:Name="Btn_Delete" Click="Btn_Delete_Click" Tag="{Binding}"/>
                        </StackPanel>
                        <TextBlock Text="{Binding Geburtsdatum, StringFormat='dd.MM.yyyy'}"/>
                    </StackPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>-->
        </ListBox>

        <!--SelectedItem gib das Objekt hinter dem markierten Element zurück (Hier unter Verwendung des globalen DataTemplates)-->
        <Label Content="{Binding ElementName=Lsb_Person, Path=SelectedItem, TargetNullValue=NULL}"/>

        <!--SelectedIndex gibt die Indexposition des markierten Elements zurück-->
        <Label Content="{Binding ElementName=Lsb_Person, Path=SelectedIndex}"/>

        <!--SelectedValue gibt die in der Property SelectedValuePath im ItemControl angegebene Property zurück-->
        <Label Content="{Binding ElementName=Lsb_Person, Path=SelectedValue}"/>

    </StackPanel>

</Window>
